ls()
a = c(-5:5)             # número del -5 al 5
b = c(1:3,3:1,1:3)      # 1 2 3 3 2 1 1 2 3
c = (1:15) ^ 2          # números del 1 al 15 al cuadrado
d = (1:16) * 2 + 8      # números pares del 10 al 40
edades = c(26, 52, 48, 31, 29, 31, 37, 38, 34, 40, 36, 36, 28, 33, 29, 29, 29, 29, 38, 44, 30, 39, 32, 52, 31, 35, 36)
mean(edades)
min(edades)
max(edades)
sd(edades)
pi1 = seq(from = pi, to = 2*pi, length = 20)
pi2 = seq(from = 0.5, to = 0.155, by = -0.005)
q()
v1 = c("x", "y")
v1
v2 = c(1:5)
paste(v1,v2)
paste(v1, 1:5, 10:7)
setwd("~/R")
getwd()
range(iris$Petal.Width)
ncateg = log2(nrow(iris)) + 1
cortes_PetWid = seq(0, 2.5, length = ncateg)
cut_PetWid = cut(iris$Petal.Width, cortes_PetWid, rigth=F)
freq_PetWid = table(cut_PetWid)
acum_freqPetWid = cumsum(freq_PetWid)
acum_freqPetWid = c(0, acum_freqPetWid)
plot(cortes_PetWid, acum_freqPetWid)
lines(cortes_PetWid, acum_freqPetWid)
freq_PetWid
cut_PetWid
intervalos = round(log2(nrow(iris))+1, digits=0)
rango.pw = round(range(iris$Petal.Width), digits=0)
cortes.pw = seq(rango.pw[1], rango.pw[2], by=(rango.pw[2]-rango.pw[1])/intervalos)
iris.cut.pw = cut(iris$Petal.Width, cortes.pw, right=True)
iris.cut.pw
iris.cut.pw = cut(iris$Petal.Width, cortes.pw, right=TRUE)
iris.cut.pw
freq_Species = table(iris$Species)            # Frecuencia
relfreq_Species = freq_Species / nrow(iris)   # Frecuencia relativa
freq_Species
relfreq_Species
tapply(iris$Petal.Length, iris$Species, mean)
range(iris$Sepal.Length)
ncateg = log2(nrow(iris)) + 1
cortes_SepLen = seq(4.0, 8.0, length = ncateg)
iris_cut_SepLen = cut(iris$Sepal.Length, cortes_SepLen, rigth=F)
seplen_table = table(iris_cut_SepLen)
barplot(seplen_table, xlab="Sepal length [cm]", ylab="Frequency", main="Barplot of Sepal length")
hist(iris$Sepal.Length, xlab="Sepal length [cm]", ylab="Frequency", main="Histogram of Sepal length")
barplot(seplen_table, xlab="Sepal length [cm]", ylab="Frequency", main="Barplot of Sepal length")
range(iris$Petal.Width)
ncateg = log2(nrow(iris)) + 1
cortes_PetWid = seq(0, 2.5, length = ncateg)
cut_PetWid = cut(iris$Petal.Width, cortes_PetWid, rigth=F)
freq_PetWid = table(cut_PetWid)
acum_freqPetWid = cumsum(freq_PetWid)
acum_freqPetWid = c(0, acum_freqPetWid)
plot(cortes_PetWid, acum_freqPetWid, ylab="Frequency", xlab="Petal width [cm]", main="Frecuencia acumulada de")
lines(cortes_PetWid, acum_freqPetWid)
range(iris$Petal.Width)
ncateg = log2(nrow(iris)) + 1
cortes_PetWid = seq(0, 2.5, length = ncateg)
cut_PetWid = cut(iris$Petal.Width, cortes_PetWid, rigth=F)
freq_PetWid = table(cut_PetWid)
acum_freqPetWid = cumsum(freq_PetWid)
acum_freqPetWid = c(0, acum_freqPetWid)
plot(cortes_PetWid, acum_freqPetWid, ylab="Frequency", xlab="Petal width [cm]", main="Frecuencia acumulada de Ancho del Pétalo")
lines(cortes_PetWid, acum_freqPetWid)
cat('covarianza entre Sepal Length y Sepal Width:', cov(iris$Sepal.Length, iris$Sepal.Width))
cat('correlacion entre Sepal Length y Sepal Width:', cor(iris$Sepal.Length, iris$Sepal.Width))
range(iris$Petal.Width)
ncateg = log2(nrow(iris)) + 1
cortes_PetWid = seq(0, 2.5, length = ncateg)
cut_PetWid = cut(iris$Petal.Width, cortes_PetWid, rigth=F)
freq_PetWid = table(cut_PetWid)
acum_freqPetWid = c(0, cumsum(freq_PetWid))
plot(cortes_PetWid, acum_freqPetWid, ylab="Frequency", xlab="Petal width [cm]", main="Frecuencia acumulada de Ancho del Pétalo")
lines(cortes_PetWid, acum_freqPetWid)
range(iris$Petal.Width)
range(iris$Sepal.Length)
r = range(iris$Petal.Width)
ncateg = log2(nrow(iris)) + 1
cortes_PetWid = seq(trunc(r[1]), trunc(r[2] + 1), length = ncateg)
cut_PetWid = cut(iris$Petal.Width, cortes_PetWid, rigth=F)
freq_PetWid = table(cut_PetWid)
acum_freqPetWid = c(0, cumsum(freq_PetWid))
plot(cortes_PetWid, acum_freqPetWid, ylab="Frequency", xlab="Petal width [cm]", main="Frecuencia acumulada de Ancho del Pétalo")
lines(cortes_PetWid, acum_freqPetWid)
plot(iris$Sepal.Length, iris$Sepal.Width, xlab="Sepal Length size [cm]", ylab="Sepal Width size [cm]", main="Scatter Plot for Sepal Width vs Sepal Length")
cat('covarianza entre Sepal Length y Sepal Width:', cov(iris$Sepal.Length, iris$Sepal.Width))
cat('correlacion entre Sepal Length y Sepal Width:', cor(iris$Sepal.Length, iris$Sepal.Width))
plot(iris$Petal.Length, iris$Petal.Width, xlab="Petal Length size [cm]", ylab="Petal Width size [cm]", main="Scatter Plot for Petal Width vs Petal Length")
cat('covarianza entre Petal Length y Petal Width:', cov(iris$Petal.Length, iris$Petal.Width))
cat('correlacion entre Petal Length y Petal Width:', cor(iris$Petal.Length, iris$Petal.Width))
boxplot(Sepal.Length ~ Species, data=iris, ylab="Sepal length [cm]", main="Largo del sepalo por especie")
virginica = iris[iris$Species == "virginica",]
variables = c()
indice = 1
for (i in 1:length(colnames(virginica))){
aux_value = virginica[colnames(virginica)][1,][,i]
if (is.numeric(aux_value)){
print(colnames(virginica)[i])
variables[indice] = colnames(virginica)[i]
print(indice)
indice = indice + 1
}
}
print(variables)
promedio = c()
mediana = c()
varianza = c()
stdev = c()
for (i in 1:length(variables)){
prop = variables[i]
promedio[i] = round(mean(virginica[,prop]), digits=1)
mediana[i] = round(median(virginica[,prop]), digits=1)
varianza[i] = round(var(virginica[,prop]), digits=2)
stdev[i] = round(sqrt(varianza[i]), digits=2)
}
tabla_virginica = data.frame(promedio, mediana, varianza, stdev, row.names = variables)
tabla_virginica
plot(iris$Sepal.Length, iris$Sepal.Width, xlab="Sepal Length size [cm]", ylab="Sepal Width size [cm]", main="Scatter Plot for Sepal Width vs Sepal Length")
abline(lm(iris$Sepal.Length ~ iris$Sepal.Width))
abline(lm(iris$Sepal.Width ~ iris$Sepal.Length))
plot(iris$Petal.Length, iris$Petal.Width, xlab="Petal Length size [cm]", ylab="Petal Width size [cm]", main="Scatter Plot for Petal Width vs Petal Length")
abline(lm(iris$Petal.Width ~ iris$Petal.Length))
virginica = iris[iris$Species == "virginica",]
variables = c()
indice = 1
for (i in 1:length(colnames(virginica))){
aux_value = virginica[colnames(virginica)][1,][,i]
if (is.numeric(aux_value)){
print(colnames(virginica)[i])
variables[indice] = colnames(virginica)[i]
print(indice)
indice = indice + 1
}
}
print(variables)
promedio = c()
mediana = c()
varianza = c()
stdev = c()
for (i in 1:length(variables)){
prop = variables[i]
promedio[i] = round(mean(virginica[,prop]), digits=1)
mediana[i] = round(median(virginica[,prop]), digits=1)
varianza[i] = round(var(virginica[,prop]), digits=2)
stdev[i] = round(sqrt(varianza[i]), digits=2)
}
tabla_virginica = data.frame(promedio, mediana, varianza, stdev, row.names = variables)
tabla_virginica
help(iris)
install.packages('markdown')
setwd("~/Cursos/Diplomado-Datos/taller-datos")
library(RSQLite)
library(dplyr)
con <- dbConnect(SQLite(), dbname=paste0(getwd(),"/ppt/database.sqlite"))
player       <- tbl_df(dbGetQuery(con,"SELECT * FROM player"))
getwd()
options(encoding="utf-8")
library(RSQLite)
library(dplyr)
con <- dbConnect(SQLite(), dbname=paste0(getwd(),"../Dataset/database.sqlite"))
getwd()
paste0(getwd(),"../Dataset/database.sqlite")
paste0(getwd(),"/../Dataset/database.sqlite")
con <- dbConnect(SQLite(), dbname=paste0(getwd(),"/../Dataset/database.sqlite"))
dbListTables(con)
tbl_df(dbGetQuery(con, "DESCRIBE player"))
tbl_df(dbGetQuery(con, "SELECT * from player LIMIT 10"))
player       <- tbl_df(dbGetQuery(con,"SELECT * FROM player"))
player_stats <- tbl_df(dbGetQuery(con,"SELECT * FROM player_stats"))
Match        <- tbl_df(dbGetQuery(con,"SELECT * FROM Match"))
Team         <- tbl_df(dbGetQuery(con,"SELECT * FROM Team"))
Country      <- tbl_df(dbGetQuery(con,"SELECT * FROM Country"))
League       <- tbl_df(dbGetQuery(con,"SELECT * FROM League"))
SQLite       <- tbl_df(dbGetQuery(con,"SELECT * FROM sqlite_sequence"))
a<-tbl_df(dbGetQuery(con,"SELECT id, player_api_id, player_name FROM player join player_stats on
player.player_api_id = player_stats.player_api_id where player_name like 'Alexis Sanchez'"))
a<-tbl_df(dbGetQuery(con,"SELECT birthday height weight FROM player join player_stats on
player.player_api_id = player_stats.player_api_id where player_name like 'Alexis Sanchez'"))
a<-tbl_df(dbGetQuery(con,"SELECT birthday, height, weight FROM player join player_stats on
player.player_api_id = player_stats.player_api_id where player_name like 'Alexis Sanchez'"))
a
a<-tbl_df(dbGetQuery(con,"SELECT player_name, birthday, height, weight FROM player join player_stats on
player.player_api_id = player_stats.player_api_id where player_name like 'Alexis Sanchez'"))
a
a<-tbl_df(dbGetQuery(con,"SELECT player_name, birthday, height, weight FROM player join player_stats on
player.player_api_id = player_stats.player_api_id where player_name like 'Alexis Sanchez' GROUP BY player_name"))
a
consulta =
"SELECT player_name, birthday, height, weight
FROM player
JOIN player_stats
ON player.player_api_id = player_stats.player_api_id
WHERE player_name like 'Alexis Sanchez'
GROUP BY player_name"
a<-tbl_df(dbGetQuery(con,consulta))
a
tbl_df(dbGetQuery(con, "SELECT * FROM player_stats LIMIT 10"))
consulta =
"SELECT player_name, height, weight, overall_rating, potential, finishing
FROM player
JOIN player_stats
ON player.player_api_id = player_stats.player_api_id
WHERE player_name like 'Alexis Sanchez'
GROUP BY player_name"
a<-tbl_df(dbGetQuery(con,consulta))
a
library(RSQLite)
library(dplyr)
con <- dbConnect(SQLite(), dbname=paste0(getwd(),"/../Dataset/database.sqlite"))
dbListTables(con)
player       <- tbl_df(dbGetQuery(con,"SELECT * FROM player"))
player_stats <- tbl_df(dbGetQuery(con,"SELECT * FROM player_stats"))
Match        <- tbl_df(dbGetQuery(con,"SELECT * FROM Match"))
Team         <- tbl_df(dbGetQuery(con,"SELECT * FROM Team"))
Country      <- tbl_df(dbGetQuery(con,"SELECT * FROM Country"))
League       <- tbl_df(dbGetQuery(con,"SELECT * FROM League"))
SQLite       <- tbl_df(dbGetQuery(con,"SELECT * FROM sqlite_sequence"))
consulta =
"SELECT player_name, height, weight, overall_rating, potential, finishing
FROM player
JOIN player_stats
ON player.player_api_id = player_stats.player_api_id
WHERE player_name like 'Virgil'
GROUP BY player_name"
a<-tbl_df(dbGetQuery(con,consulta))
a
consulta =
"SELECT player_name, height, weight, overall_rating, potential, finishing
FROM player
JOIN player_stats
ON player.player_api_id = player_stats.player_api_id
WHERE player_name like '%Virgil%'
GROUP BY player_name"
a<-tbl_df(dbGetQuery(con,consulta))
a
consulta =
"SELECT player_name, height, weight, overall_rating, potential, finishing
FROM player
JOIN player_stats
ON player.player_api_id = player_stats.player_api_id
WHERE player_name like '%michael gerard%'
GROUP BY player_name"
a<-tbl_df(dbGetQuery(con,consulta))
a
consulta =
"SELECT player_name, height, weight, overall_rating, potential, finishing
FROM player
JOIN player_stats
ON player.player_api_id = player_stats.player_api_id
WHERE player_name like '%ingham%'
GROUP BY player_name"
a<-tbl_df(dbGetQuery(con,consulta))
a
tail(player)
tail(player_stats)
player_stat_final <- tbl_df(dbGetQuery(con, "SELECT DISTINCT player_fifa_api_id FROM player_stats"))
tail(player_stat_final)
player_stat_final
nrow(player)
nrow(player_stat)
nrow(player_stats)
nrow(player_stat_final)
help(write.table)
write.table(player, file="players.csv", sep=",", row.names=FALSE)
tbl_df(dbGetQuery(con, "SELECT DISTINCT player_name FROM player WHERE player_name LIKE '%Abad%'"))
tbl_df(dbGetQuery(con, "SELECT DISTINCT player_name FROM player WHERE player_name LIKE '%carlos%'"))
library(RSQLite)
library(dplyr)
con <- dbConnect(SQLite(), dbname=paste0(getwd(),"/../Dataset/database.sqlite"))
dbListTables(con)
player       <- tbl_df(dbGetQuery(con,"SELECT * FROM player"))
head(player)
nacimiento <- tbl_df(dbGetQuery(con,"SELECT birthday FROM player"))
head(nacimiento)
nac = nacimiento[order(birthday),]
nac = nacimiento[order(nacimiento$birthday),]
nrow(nac)
head(nac)
tail(nac)
nacimiento <- tbl_df(dbGetQuery(con,"SELECT player_name, birthday FROM player"))
nac = nacimiento[order(nacimiento$birthday),]
nrow(nac)
head(nac)
library(RSQLite)
library(dplyr)
con <- dbConnect(SQLite(), dbname=paste0(getwd(),"/../Dataset/database.sqlite"))
dbListTables(con)
player       <- tbl_df(dbGetQuery(con,"SELECT * FROM player"))
player[22,]
player[42,]
player[42]
player[42,]
